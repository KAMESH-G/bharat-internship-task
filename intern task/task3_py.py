# -*- coding: utf-8 -*-
"""task3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-s5YXnAW2gVwbjB3AaL5aT7xe-b56a2V
"""

# Import necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

# Load and preprocess the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_train, X_test = X_train / 255.0, X_test / 255.0  # Normalize pixel values to between 0 and 1

# Build the neural network model
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Flatten the 28x28 input images
    Dense(128, activation='relu'),  # Fully connected layer with 128 units and ReLU activation
    Dense(10, activation='softmax')  # Output layer with 10 units for 10 classes (digits 0-9)
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',  # For integer labels (0, 1, 2, ...)
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=5)

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=2)
print(f"Test accuracy: {test_accuracy * 100:.2f}%")

# Make predictions on new data
num_samples_to_predict = 5  # Change this to the number of samples you want to predict
sample_images = X_test[:num_samples_to_predict]
sample_labels = y_test[:num_samples_to_predict]

predictions = model.predict(sample_images)
predicted_labels = np.argmax(predictions, axis=1)

# Print the predicted labels and the true labels
for i in range(num_samples_to_predict):
    print(f"Predicted: {predicted_labels[i]}, Actual: {sample_labels[i]}")